# bot.py

import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
from calculator import calculate_montage_price

logging.basicConfig(level=logging.INFO)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
(
    TYPING_EQUIP_COST,
    ASK_MACHINE_ROOM,
    ASK_SHAFT_TYPE,
    ASK_REPLACEMENT,
    ASK_DOORS,
    ASK_PLATFORMS,
    ASK_DISPATCHER,
    ASK_REGION
) = range(8)

user_data = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –≤ —Ä—É–±–ª—è—Ö:")
    return TYPING_EQUIP_COST

async def equipment_cost(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        price = float(update.message.text.replace(' ', '').replace(',', '.'))
        user_data[update.message.chat_id] = {"price": price}
        reply = ReplyKeyboardMarkup([["–î–∞", "–ù–µ—Ç"]], one_time_keyboard=True)
        await update.message.reply_text("–ï—Å—Ç—å –º–∞—à–∏–Ω–Ω–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ?", reply_markup=reply)
        return ASK_MACHINE_ROOM
    except:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ù–∞–ø—Ä–∏–º–µ—Ä: 950000")
        return TYPING_EQUIP_COST

async def machine_room(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data[update.message.chat_id]["no_machine_room"] = (update.message.text == "–ù–µ—Ç")
    reply = ReplyKeyboardMarkup([["–º–æ–Ω–æ–ª–∏—Ç", "–º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∞—è", "–∫–∏—Ä–ø–∏—á–Ω–∞—è"]], one_time_keyboard=True)
    await update.message.reply_text("–¢–∏–ø —à–∞—Ö—Ç—ã?", reply_markup=reply)
    return ASK_SHAFT_TYPE

async def shaft_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data[update.message.chat_id]["shaft_type"] = update.message.text
    reply = ReplyKeyboardMarkup([["–ó–∞–º–µ–Ω–∞", "–ù–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∞"]], one_time_keyboard=True)
    await update.message.reply_text("–¢–∏–ø –æ–±—ä–µ–∫—Ç–∞?", reply_markup=reply)
    return ASK_REPLACEMENT

async def replacement(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data[update.message.chat_id]["replacement"] = (update.message.text == "–ó–∞–º–µ–Ω–∞")
    reply = ReplyKeyboardMarkup([["–î–∞", "–ù–µ—Ç"]], one_time_keyboard=True)
    await update.message.reply_text("–ö–∞–±–∏–Ω–∞ –ø—Ä–æ—Ö–æ–¥–Ω–∞—è? (–¥–≤–µ—Ä–µ–π –±–æ–ª—å—à–µ, —á–µ–º –æ—Å—Ç–∞–Ω–æ–≤–æ–∫)", reply_markup=reply)
    return ASK_DOORS

async def doors(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data[update.message.chat_id]["more_doors"] = (update.message.text == "–î–∞")
    reply = ReplyKeyboardMarkup([["–ú—ã", "–ó–∞—Å—Ç—Ä–æ–π—â–∏–∫"]], one_time_keyboard=True)
    await update.message.reply_text("–ö—Ç–æ –¥–µ–ª–∞–µ—Ç –Ω–∞—Å—Ç–∏–ª—ã?", reply_markup=reply)
    return ASK_PLATFORMS

async def platforms(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data[update.message.chat_id]["we_do_platforms"] = (update.message.text == "–ú—ã")
    reply = ReplyKeyboardMarkup([["–ë–∞–∑–æ–≤–∞—è", "IP", "–ë–µ–∑ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∏–∑–∞—Ü–∏–∏"]], one_time_keyboard=True)
    await update.message.reply_text("–¢–∏–ø –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∏–∑–∞—Ü–∏–∏?", reply_markup=reply)
    return ASK_DISPATCHER

async def dispatcher(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data[update.message.chat_id]["dispatcher"] = update.message.text
    reply = ReplyKeyboardMarkup([["–°–ü–±", "–†–µ–≥–∏–æ–Ω"]], one_time_keyboard=True)
    await update.message.reply_text("–ì–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –æ–±—ä–µ–∫—Ç?", reply_markup=reply)
    return ASK_REGION

async def region(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data[update.message.chat_id]["region"] = (update.message.text == "–†–µ–≥–∏–æ–Ω")

    params = user_data[update.message.chat_id]
    price = params.pop("price")

    result = calculate_montage_price(price, params)

    breakdown = "\n".join(
        f"{label}: +{int(minv):,} ‚Äî +{int(maxv):,} ‚ÇΩ" for label, minv, maxv in result["adjustments"]
    )
    base = result["base"]
    total = result["total"]

    reply_text = (
        f"üí∞ *–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–Ω—Ç–∞–∂–∞:*\n"
        f"–ë–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞: {int(base[0]):,} ‚Äî {int(base[1]):,} ‚ÇΩ\n"
        f"\nüìã *–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏:*\n{breakdown}\n\n"
        f"üì¶ *–ò—Ç–æ–≥–æ:* _{int(total[0]):,} ‚Äî {int(total[1]):,} ‚ÇΩ_"
    )

    await update.message.reply_text(reply_text, parse_mode="Markdown")
    return ConversationHandler.END

def main():
    app = ApplicationBuilder().token("7926960422:AAH-OFVzhcdE4gm0KgSuMn9JRxIxSTUrtw0").build()

    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            TYPING_EQUIP_COST: [MessageHandler(filters.TEXT & ~filters.COMMAND, equipment_cost)],
            ASK_MACHINE_ROOM: [MessageHandler(filters.TEXT, machine_room)],
            ASK_SHAFT_TYPE: [MessageHandler(filters.TEXT, shaft_type)],
            ASK_REPLACEMENT: [MessageHandler(filters.TEXT, replacement)],
            ASK_DOORS: [MessageHandler(filters.TEXT, doors)],
            ASK_PLATFORMS: [MessageHandler(filters.TEXT, platforms)],
            ASK_DISPATCHER: [MessageHandler(filters.TEXT, dispatcher)],
            ASK_REGION: [MessageHandler(filters.TEXT, region)],
        },
        fallbacks=[],
    )

    app.add_handler(conv)
    app.run_polling()

if __name__ == "__main__":
    main()
