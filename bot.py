# bot.py

import os
import re
import logging
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, Document
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
)

from calculator import calculate_montage_price

logging.basicConfig(level=logging.INFO)

TOKEN = os.getenv("BOT_TOKEN") or "–≤—Å—Ç–∞–≤—å_—Å–≤–æ–π_—Ç–æ–∫–µ–Ω_—Å—é–¥–∞"

# –®–∞–≥–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è
PDF, REGION, REPLACEMENT, PASS_THROUGH, DOORS_MORE, DISPATCH, EXTRA_QUESTIONS = range(7)

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
user_data = {}

# ==== PDF –û–ë–†–ê–ë–û–¢–ö–ê ====

def parse_pdf_text(text):
    # –£–ø—Ä–æ—â—ë–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
    result = {
        "lift_type": "–ø–∞—Å—Å–∞–∂–∏—Ä—Å–∫–∏–π" if "–ø–∞—Å—Å–∞–∂–∏—Ä" in text.lower() else "–≥—Ä—É–∑–æ–≤–æ–π",
        "machine_room": "–±–µ–∑ –º–∞—à–∏–Ω–Ω–æ–≥–æ –ø–æ–º–µ—â–µ–Ω–∏—è" not in text.lower(),
        "stops": int(re.search(r"(\d+)\s*–æ—Å—Ç–∞–Ω–æ–≤", text.lower()).group(1)) if re.search(r"(\d+)\s*–æ—Å—Ç–∞–Ω–æ–≤", text.lower()) else 0,
        "height": float(re.search(r"(\d+[.,]?\d*)\s*–º", text.lower()).group(1).replace(',', '.')) if re.search(r"(\d+[.,]?\d*)\s*–º", text.lower()) else 0,
        "fire_mode": "—Ä–ø–ø–ø" in text.lower(),
        "equipment_price": float(re.search(r"([\d\s]+)\s*—Ä—É–±", text.lower()).group(1).replace(' ', '')) if re.search(r"([\d\s]+)\s*—Ä—É–±", text.lower()) else 0
    }
    return result

# ==== –°–¶–ï–ù–ê–†–ò–ô ====

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ PDF-—Ñ–∞–π–ª —Å–æ —Å–º–µ—Ç–æ–π –∏–ª–∏ –¢–ó.")
    return PDF

async def handle_pdf(update: Update, context: ContextTypes.DEFAULT_TYPE):
    file: Document = update.message.document
    if not file.file_name.endswith(".pdf"):
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º–µ–Ω–Ω–æ PDF-—Ñ–∞–π–ª.")
        return PDF

    file_path = await file.get_file()
    pdf_bytes = await file_path.download_as_bytearray()

    import fitz  # PyMuPDF
    doc = fitz.open(stream=pdf_bytes, filetype="pdf")
    full_text = "\n".join(page.get_text() for page in doc)

    parsed = parse_pdf_text(full_text)
    user_data[update.effective_chat.id] = parsed

    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω:",
        reply_markup=ReplyKeyboardMarkup(
            [["–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"], ["–õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å"], ["–î—Ä—É–≥–æ–π —Ä–µ–≥–∏–æ–Ω"]],
            one_time_keyboard=True,
            resize_keyboard=True,
        ),
    )
    return REGION

async def set_region(update: Update, context: ContextTypes.DEFAULT_TYPE):
    region = update.message.text.lower()
    chat_id = update.effective_chat.id
    user_data[chat_id]["region"] = (
        "–°–ü–±" if "–ø–µ—Ç–µ—Ä–±—É—Ä–≥" in region else "–õ–û" if "–ª–µ–Ω–∏–Ω–≥—Ä–∞–¥" in region else "—Ä–µ–≥–∏–æ–Ω"
    )

    await update.message.reply_text(
        "–≠—Ç–æ –∑–∞–º–µ–Ω–∞ –∏–ª–∏ –Ω–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∞?",
        reply_markup=ReplyKeyboardMarkup(
            [["–ó–∞–º–µ–Ω–∞"], ["–ù–æ–≤–æ–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ"]], one_time_keyboard=True, resize_keyboard=True
        ),
    )
    return REPLACEMENT

async def set_replacement(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data[update.effective_chat.id]["is_new_building"] = "–Ω–æ–≤–æ–µ" in update.message.text.lower()

    await update.message.reply_text(
        "–ö–∞–±–∏–Ω–∞ –ø—Ä–æ—Ö–æ–¥–Ω–∞—è?",
        reply_markup=ReplyKeyboardMarkup([["–î–∞"], ["–ù–µ—Ç"]], one_time_keyboard=True, resize_keyboard=True),
    )
    return PASS_THROUGH

async def set_pass_through(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data[update.effective_chat.id]["pass_through"] = update.message.text.lower() == "–¥–∞"

    await update.message.reply_text(
        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–≤–µ—Ä–µ–π –ø—Ä–µ–≤—ã—à–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–Ω–æ–≤–æ–∫?",
        reply_markup=ReplyKeyboardMarkup([["–î–∞"], ["–ù–µ—Ç"]], one_time_keyboard=True, resize_keyboard=True),
    )
    return DOORS_MORE

async def set_doors_more(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data[update.effective_chat.id]["doors_more_than_stops"] = update.message.text.lower() == "–¥–∞"

    await update.message.reply_text(
        "–¢–∏–ø –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∏–∑–∞—Ü–∏–∏?",
        reply_markup=ReplyKeyboardMarkup(
            [["–û–±—ä–µ–∫—Ç –±–µ–∑ –ü–ö"], ["–û–±—ä–µ–∫—Ç —Å –ü–ö"], ["–ö—Ä–∏—Å—Ç–∞–ª–ª"], ["–ë–µ–∑ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∏–∑–∞—Ü–∏–∏"]],
            one_time_keyboard=True,
            resize_keyboard=True,
        ),
    )
    return DISPATCH

async def set_dispatch(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data[update.effective_chat.id]["dispatcher"] = update.message.text

    await update.message.reply_text("–û—Å—Ç–∞–ª—å–Ω—ã–µ —É—Ç–æ—á–Ω–µ–Ω–∏—è –ø–æ–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω—ã ‚Äî —Ä–∞—Å—á—ë—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...")

    return await finalize(update, context)

async def finalize(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    data = user_data.get(chat_id, {})

    result = calculate_montage_price(data)

    lines = [f"üí∞ *–†–∞—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –º–æ–Ω—Ç–∞–∂–∞ –ª–∏—Ñ—Ç–∞*"]
    lines.append(f"\n*–ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:* `{int(result['base_total'])} ‚ÇΩ`")

    if result["adjustments"]:
        lines.append(f"\n*–ù–∞–¥–±–∞–≤–∫–∏:*")
        for name, val in result["adjustments"]:
            lines.append(f"‚Äî {name}: `{int(val)} ‚ÇΩ`")

    if result["estimated_70_percent"]:
        lines.append(f"\nüìä *–û—Ü–µ–Ω–∫–∞ 70% –æ—Ç –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:* `{int(result['estimated_70_percent'])} ‚ÇΩ`")

    await update.message.reply_text("\n".join(lines), parse_mode="Markdown")

    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

# ==== –ó–ê–ü–£–°–ö ====

def main():
    app = ApplicationBuilder().token(TOKEN).build()

    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            PDF: [MessageHandler(filters.Document.PDF, handle_pdf)],
            REGION: [MessageHandler(filters.TEXT, set_region)],
            REPLACEMENT: [MessageHandler(filters.TEXT, set_replacement)],
            PASS_THROUGH: [MessageHandler(filters.TEXT, set_pass_through)],
            DOORS_MORE: [MessageHandler(filters.TEXT, set_doors_more)],
            DISPATCH: [MessageHandler(filters.TEXT, set_dispatch)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv)
    app.run_polling()

if __name__ == "__main__":
    main()
